import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import time

# -------------------- CONFIGURATION --------------------
st.set_page_config(page_title="KPI Projet", layout="wide")

# URL publique de ta Google Sheet
SHEET_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQKgao_dLrrNJV1qPYv0nW7UTkcJLVmIpDmr6ZDSBVjjyihqWdNxOpHT2wVvsbJDOOqmyNBDNPmSVT7/pub?gid=0&single=true&output=csv"

@st.cache_data(ttl=300)
def charger_donnees():
    df = pd.read_csv(SHEET_CSV_URL)
    df['√âch√©ance'] = pd.to_datetime(df['√âch√©ance'], errors='coerce')
    df['√âtat d‚Äôavancement'] = df['√âtat d‚Äôavancement'].fillna("")
    df['Termin√©e'] = df['√âtat d‚Äôavancement'].str.lower().str.contains("termin√©e")
    df['En cours'] = df['√âtat d‚Äôavancement'].str.lower().str.contains("cours")
    df['En retard'] = (df['√âch√©ance'] < pd.Timestamp.today()) & (~df['Termin√©e'])
    return df

# -------------------- Titre et rechargement --------------------
st.title("Suivi des Activit√©s & √âch√©ances des Rendus")

if st.button("üîÑ Recharger les donn√©es"):
    st.cache_data.clear()

df = charger_donnees()

# -------------------- KPI --------------------
st.subheader("üìå Indicateurs cl√©s")
col1, col2, col3, col4 = st.columns(4)
col1.metric("üì¶ Total des Activit√© √† r√©aliser", len(df))
col2.metric("üü© Activt√©s Termin√©es", df['Termin√©e'].sum())
col3.metric("‚è≥ Activit√© En cours", df['En cours'].sum())
col4.metric("üïì Activit√© En retard", df['En retard'].sum())

# -------------------- D√©filement automatique --------------------
# Ici il doit y'avoir trois cadres en utilisant les col de streamlit avec une mise page optimale
# destin√©s pour chaque indicateur : Termin√©e, En cours, En retard
# L'activit√© de chaque des indicateurs doivent d√©filer mot par mot
# avec un sleep de 1/2 seconde par mot suivi des commentaires sur fichiers
st.subheader("üîÑ Activit√©s")
categories = {
    "üü© Termin√©es": df[df['Termin√©e']]['Activit√©'].tolist(),
    "‚è≥ En cours": df[df['En cours']]['Activit√©'].tolist(),
    "üïì En retard": df[df['En retard']]['Activit√©'].tolist()
}
placeholder = st.empty()
for i in range(1):  # nombre de cycles de d√©filement
    for etat, activites in categories.items():
        with placeholder.container():
            st.markdown(f"### {etat}")
            if not activites:
                st.info("Aucune activit√©.")
            else:
                for act in activites:
                    st.success(f"‚Ä¢ {act}")
                    time.sleep(0.4)
            time.sleep(1.2)

# -------------------- ALERTES --------------------
# Ici il doit y'avoir aussi une alerte pour chaque responsable
# de son activit√© en retard ou imminente
st.subheader("üö® T√¢ches en retard ou imminentes")
df_alertes = df[~df['Termin√©e'] & df['√âch√©ance'].notna()].copy()
df_alertes['Jours restants'] = (df_alertes['√âch√©ance'] - pd.Timestamp.now()).dt.days
df_alertes['Alerte'] = df_alertes['Jours restants'].apply(lambda x:
    "üü• EN RETARD" if x < 0 else ("üü® √âch√©ance proche" if x <= 3 else "")
)

alerte_df = df_alertes[df_alertes['Alerte'] != ""][['Activit√©', 'R (Responsable)', '√âch√©ance', 'Jours restants', 'Alerte']]
if not alerte_df.empty:
    st.dataframe(alerte_df)
else:
    st.success("‚úÖ Aucune t√¢che urgente ou en retard.")

# -------------------- GRAPHIQUES --------------------
st.subheader("üìà Suivi visuel des √©ch√©ances et avancement")
g1, g2 = st.columns(2)

# Graphe 1 : R√©partition des t√¢ches par √©tat
# R√©partition des t√¢ches selon les diff√©rents √©tats d'avancement : Termin√©e, En cours, etc.
with g1:
    fig1 = px.histogram(df, x="√âtat d‚Äôavancement", color="√âtat d‚Äôavancement",
                        title="R√©partition des t√¢ches par √©tat d‚Äôavancement",
                        color_discrete_sequence=px.colors.qualitative.Set2)
    st.plotly_chart(fig1, use_container_width=True)

# Graphe 2 : Nombre de t√¢ches par date d‚Äô√©ch√©ance
with g2:
    df_echeances = df[df['√âch√©ance'].notna()].copy()
    df_echeances['Jour'] = df_echeances['√âch√©ance'].dt.date
    nb_par_jour = df_echeances.groupby('Jour').size().reset_index(name='Nombre de t√¢ches')

    fig2 = px.bar(nb_par_jour, x='Jour', y='Nombre de t√¢ches',
                  title="üìÖ Nombre de t√¢ches par jour d‚Äô√©ch√©ance",
                  labels={"Jour": "Date", "Nombre de t√¢ches": "T√¢ches"},
                  color='Nombre de t√¢ches',
                  color_continuous_scale='Tealrose')
    st.plotly_chart(fig2, use_container_width=True)

# Graphe 3 : √âtat d‚Äôavancement par responsable
if "R (Responsable)" in df.columns:
    fig3 = px.histogram(df, x="R (Responsable)", color="√âtat d‚Äôavancement",
                        title="T√¢ches par responsable et par √©tat d‚Äôavancement",
                        barmode="stack",
                        color_discrete_sequence=px.colors.qualitative.Pastel)
    st.plotly_chart(fig3, use_container_width=True)

# -------------------- TABLEAU COMPLET --------------------
# Ici l'utilisateur doit pouvoir apporter des modifications sur le tableau complet
# Il doit pouvoir ajouter une nouvelle activit√©, modifier une activit√© existante
# ou supprimer une activit√© et les modifications doivent √™tre enregistr√©es dans la Google Sheet
st.subheader("üìã Tableau complet des t√¢ches")
st.dataframe(df[['Activit√©', 'R (Responsable)', 'C (Contributeurs)', '√âtat d‚Äôavancement', 'Commentaires', '√âch√©ance']])
